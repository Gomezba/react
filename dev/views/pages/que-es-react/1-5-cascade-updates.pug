extends ../../templates/template 

append h1 
    h1 Cascade updates

append content 
    article(id="1" class="content")
        h2 Cascade Updates
        p Uno de los últimos grandes problemas que enfrentaron los ingenieros de Facebook fue lo que llamaron "actualizaciones en cascada" o cascade updates. El sistema de plantillas que utilizaban permitía aplicar cambios a las vistas de manera dinámica, pero cada cambio provocaba una cascada de recargas que se volvía inmanejable.

        p Cada vez que una variable dentro de una plantilla cambiaba (por ejemplo, al hacer clic en un botón), toda la plantilla se recargaba, es decir, se sobreescribía completamente con una nueva versión. Aun cuando solo cambiaba un pequeño detalle, todo el contenido de la plantilla se reemplazaba.
        img(src="../../assets/img/1-5-cascade-updates/1.webp" alt="example")

        p El problema se agravaba porque las plantillas estaban compuestas por múltiples plantillas internas. Cuando una plantilla externa se recargaba, todas las plantillas internas también lo hacían, una por una. Esto generaba una enorme cantidad de cambios innecesarios, lo que deterioraba gravemente el rendimiento de las vistas.
        img(src="../../assets/img/1-5-cascade-updates/2.webp" alt="example")

        p En algunos casos, una sola acción del usuario provocaba recargas en varias plantillas al mismo tiempo. Peor aún, muchas veces, tras todas esas recargas, el estado de las plantillas quedaba exactamente igual, lo que significaba que se había hecho un trabajo completamente inútil.

        h3 El objetivo 

        p El objetivo era doble:

        ol 
            li  
                p Eliminar las actualizaciones en cascada, agrupando todos los cambios en una sola actualización.
            li 
                p Optimizar esa actualización, asegurándose de que solo se cambiaran los elementos estrictamente necesarios para reflejar el resultado deseado.
        img(src="../../assets/img/1-5-cascade-updates/3.webp" alt="example")

        p Si delegaban estas tareas a los desarrolladores para que las gestionaran de forma manual e imperativa, cada componente tendría que ser optimizado a fondo. Además, cada vez que esos componentes interactuaban entre sí, habría que optimizar su comportamiento conjunto, lo que hacía el proceso increíblemente complejo y poco práctico.

        h3 "Necesitaban un algoritmo"
        p Lo que necesitaban era un algoritmo que automatizara estas tareas, y ese algoritmo se convirtió en el core (núcleo) de React. Este algoritmo está basado en una estructura de datos llamada 
            em: strong Virtual DOM
            | . El 
            em: strong Virtual DOM
            |   permite que React gestione los cambios de manera eficiente, aplicando solo las actualizaciones mínimas necesarias para que la interfaz de usuario esté siempre en el estado correcto, sin tener que recargar todo el contenido como antes.

