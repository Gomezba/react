extends ../../templates/template 

append h1 
    h1 Modularización y nomenclatura

append content 
    article(id="1" class="content")
        h2 Introducción 

        p A medida que avanzamos, el código de nuestra aplicación está creciendo devidamente, por lo tanto el tamaño del archivo 
            strong main.jsx
            |   está creciendo con el, haciendo que esto se vuelva cada vez menos legible.

        p Así que llega el momento de hablar de modularización, de separar cada uno de estos componentes en un archivo propio.

        p Pero antes de eso, cambiaremos el nombre de unos de nuestros componentes ya que no están cumpliendo con una semántica correcta.

        p Seguiremos ocupando un nombre declarativo en lugar de uno imperativo, pero con una semántica correcta.

        p Hasta ahora hemos llamado el nombre de nuestros componentes: 
        ul 
            li Title 
            li User
            li List 

        p Pero realmente son nombres demasiados genéricos que no nos aportan una información realista, de que es lo que representa el componente.

        p Por ejemplo, el componente 
            strong List
            |   no es una lista cualquiera, sino que es una lista de usuarios, por lo que cambiaremos su nombre a 
            strong UsersList

        p Con el componente 
            strong User
            |   cambiaremos su nombre a 
            strong UserRow
            |   ya que no es simplemente un usuario sino una fila de una lista.      

        p Con nuestro componente 
            strong Title
            |   ¿Realmente es necesario cambiar su nombre por ejemplo UsersTitle?, pues en realidad no, ya que podemos tener un título en cualquier otra parte, por lo que su nombre es correcto.


        p Habiendo hecho los cambios, ahora si modularizaremos nuestros componentes.

        div: pre: code.language-jsx 
            |// File main.jsx
            |import ReactDOM from 'react-dom/client'
            |import './index.css'
            |
            |const container = document.getElementById('root')
            |const root = ReactDOM.createRoot(container)
            |
            |const USERS = [
            |	{
            |		name: 'Joel Gómez',
            |		state: 'Activo',
            |		role: 'PROFESOR'
            |	},
            |	{
            |		name: 'Israel Vázquez',
            |		state: 'Activo',
            |		role: 'PROFESOR'
            |	}
            |]
            |
            |const Title = ({ children }) =&gt; &lt;h1&gt;{children}&lt;/h1&gt;
            |
            |const UserRow = ({ name, state, role }) =&gt; {
            |	return (
            |		&lt;div className='user'&gt;
            |			&lt;span className='name'&gt;{name}&lt;/span&gt;
            |			&lt;span className='active'&gt;{state}&lt;/span&gt;
            |			&lt;span className='role'&gt;{role}&lt;/span&gt;
            |		&lt;/div&gt;
            |	)
            |}
            |
            |const UsersList = ({ users, children }) =&gt; {
            |	const userRendered = users.map((user) =&gt; (
            |		&lt;UserRow key={user.name} {...user}&gt;&lt;/UserRow&gt;
            |	))
            |	return (
            |		&lt;div className='list'&gt;
            |			{children} {userRendered}
            |		&lt;/div&gt;
            |	)
            |}
            |
            |const app = (
            |	&lt;UsersList className='list' users={USERS}&gt;
            |		&lt;Title&gt;Listado de usuarios&lt;/Title&gt;
            |	&lt;/UsersList&gt;
            |)
            |
            |root.render(app)


    article(id="2" class="content")
        h2 Un componente por archivo
        p Para empezar a separar nuestros componentes debemos seguir una regla muy básica, y es que 
            strong SOLO DEBEMOS DE TENER UN COMPONENTE POR ARCHIVO. 

        p Aquí podemos ver la 
            strong "S"
            |   de 
            strong Solid
            |   que nos indica 
            strong Single Responsability
            | , es decir, una sola responsabilidad.

        p Aquí puede venir la pregunta de siempre, ¿Si el componente es pequeño puedo dejarlo junto con otro en un archivo?, no, nunca, siempre tiene que haber un único archivo por componente.

    article(id="3" class="content")
        h2 Nombre de archivos
        p El nombre que le debemos dar a los archivos, siempre tiene que ser equivalente al nombre del componente como tal, y podemos escribirlo de 2 formas: 

        ul 
            li 
                p 
                    strong Nomenclatura PascalCase: 
                    strong.ts-1 UserRow.jsx     
            li 
                p 
                    strong Nomenclatura kebab-case: 
                    strong.ts-1 user-row.jsx 

        p Podemos utilizar cualquier de las 2, la que más nos guste, pero no podemos estar nombrando unos archivos en PascalCase y otros en kebab-case, todos nuestros archivos deben tener una misma nomenclatura.

    article(id="4" class="content")
        h2 ¿Dónde colocar los archivos?   
        p En cuanto a donde colocar estos archivos, se habre un gran debate y es que hay muchas organizaciones, arquitecturas posibles para un proyecto en React, en una sección posterior hablaremos de como organizar nuestro proyecto y que ventajas tiene de utilizar una y otra.

        p De momento todas las organizaciones coinciden en una cosa y es que van dentro de la carpeta 
            strong "src"
            |   en una carpeta llamada 
            strong "components" 
            | . 

        p  Entonces lo primero que debemos de hacer utilizemos la organización que utilizemos, es crear la carpeta 
            strong "components"
            |   dentro de 
            strong "src"
            |. 

        img(src="../../assets/img/4-5-modularizacion-y-nomenclatura/1.webp" alt="example").img-md 

        p La nomenclatura que utilizaremos en este curso será 
            strong PascalCase
            | , para que coincidan con el nombre de nuestros componentes y sea más fácil de identificarlos.

        img(src="../../assets/img/4-5-modularizacion-y-nomenclatura/2.webp" alt="example").img-md.has-mb

    article(id="5" class="content")
        h2 Separando componentes  

        p Como mencionamos solo debe haber un componente por archivo, así pondremos cada componente en su respectivo archivo.

        p Y para poder importarlo desde fuera, es necesario exportar cada componente.

        p Para exportar tenemos 2 maneras
            ul 
                li 
                    code export const Componente 
                    p Se utiliza más cuando en un mismo archivo suele haber más cosas por exportar.
                li 
                    code export default Componente 
                    p Se utiliza para exportar por default un componente por archivo.

        p En realidad podemos ocupar cualquiera de los 2, pero escogeremos 
            code export default
            |   ya que solo tenemos un único componente por archivo, y lo que exportemos siempre será ese único componente.

        p Una ventaja de utilizar 
            code export default
            |   es que cuando lo importemos, se nos hará más fácil renombrarlo si es que queremos hacerlo.

        p Si utilizamos el clásico export, a la hora de renombrar tendriamos que utilizar un alias, y muchas veces tendremos componentes que se llamen igual sobre todo si utilizamos librerias, así que sería más difícil renombrarlos.

        p Así que vamos a modularizar nuestros componentes.

        p: strong.ts-3 Title 

        img(src="../../assets/img/4-5-modularizacion-y-nomenclatura/3.webp" alt="example")

        p: strong.ts-3 UserRow 

        img(src="../../assets/img/4-5-modularizacion-y-nomenclatura/4.webp" alt="example")

        p: strong.ts-3 UsersList

        img(src="../../assets/img/4-5-modularizacion-y-nomenclatura/5.webp" alt="example")

        p: strong.ts-3 Importación en main.jsx

        img(src="../../assets/img/4-5-modularizacion-y-nomenclatura/6.webp" alt="example")

append submenu 
    -submenuLinks = [[1,'Introducción'],[2,'Un componente por archivo'],[3,'Nombre de archivos'],[4,'¿Dónde colocar los archivos?'],[5,'Separando componentes']]
    +submenu(submenuLinks)