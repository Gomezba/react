extends ../../templates/template 

append h1 
    h1 Valor del estado durante el render

append content 
    article(id="1" class="content")
        h2 Introducción 
        p Ya hemos aprendido cómo generar un cambio de estado. Ahora es momento de analizar qué valor toma ese estado durante el renderizado y cómo la ejecución de la función de cambio de estado afecta a la variable que lo almacena, en nuestro caso, 
            strong activeState.

        p EL concepto que tenemos que entender aquí es el de 
            strong acción
            | . Una 
            strong acción
            |   es un 
            strong evento
            |   que se produce en nuestra aplicación y para el que esta debe realizar una tarea como respuesta. 

        p Esa tarea es lo que se conoce como el 
            strong manjeador
            |   o 
            strong handle
            |   del evento.

        p Estos eventos pueden ser de varios tipos en función de quien los provoque. Por un lado tenemos al usuario a través de sus acciones sobre la interfaz como es este click del botón, a otro a un agente externo que se comunique con nuestra aplicación como cuando utilizamos un chat en tiempo real en el que cuando llega un nuevo mensaje se tiene que pintar automáticamente.

        p Y por último tenemos al propio React con acciones como el renderizado. Una acción puede generar otra acción posterior y así sucesivamente.

        p En React las acciones se procesan en 
            strong cola
            | , es decir, antes de procesar una nueva acción, la anterior a tenido que terminar por completo, y esto es muy importante entender, quiere decir que si durante este click hacemos un setState (Función de ejecución de cambio de estado), el renderizado que provoca no se ejecuta inmdiatamente sino que espera a que termine esta acción por completo, en este caso a que termine nuestro evento onClick.     

    article(id="2" class="content")
        h2 La función de cambio de estado no es síncrona
        p Empezaremos por demostrar que al momento de ejecutar la función de cambio de estado, el renderizado que provoca esta, no se ejecuta inmediatamente sino que espera a que termine estacción por completo.

        p Para ello pondremos un console.log despúes del ejecución de la función de cambio de estado.
        img(src="../../assets/img/5-9-valor-del-estado-durante-el-render/1.webp" alt="example")

        p Si miramos la pantalla al dar click al botón tenemos el siguiente resultado.
        img(src="../../assets/img/5-9-valor-del-estado-durante-el-render/2.webp" alt="example")
        p Lo que debemos saber, es que, la 
            strong función de cambio de estado
            |   no se ejecuta de forma 
            strong síncrona
            | , es decir que si vemos la línea 25 de nuestro código cuando ejecutamos la función de cambio de estado no estamos provocando un renderizado inmediatamente y cuando acaba el renderizado ejecutamos el console.log. 
        img(src="../../assets/img/5-9-valor-del-estado-durante-el-render/3.webp" alt="example")
        p De tal manera que la función de cambio de estado es 
            strong asíncrona
            |   ya que lo que hacemos con esta, es poner la acción que provoca esta función de cambio de estado en la cola, y esta acción se ejecutará cuando termine la acción actual.

        p Para entender mejor esto, debemos conocer como funciona el 
            strong event loop
            |   de JavaScript.

        p Miremoslo paso por paso: 

        ul 
            li 
                p El escuchador del evento se encuentra en el apartado de las 
                    strong web apis
                    |   del event loop, esperando a que se de click.
            li
                p Cuando se da click al botón, se ejecuta una función anónima.   

            li 
                p Se pasa al 
                    strong callstack
                    |   la función de cambio de estado 
                    strong setActiveState
                    |   y como esta es 
                    strong asíncrona
                    |   pasa al apartado de 
                    strong web apis
                    |   y de ahí se pasa al 
                    strong callback queue
                    |   que es una cola donde el primero en entrar es el primero en salir, entonces, si hay una acción antes de la acción que produce el setAtiveState que es una acción de renderizado, pues tiene que esperar a que la acción que esta primero salga del 
                    strong callback queue.              
            li 
                p Como el hilo de ejecución no se puede bloquear, en el  
                    strong callstack
                    |   se ejecuta el console.log('Después del setState') 
            li 
                p Una vez que esta vacia la pila de anidamiento  
                    strong callstack
                    |   ahora si pasa la acción del renderizado que procova la función de cambio de estado.        

    article(id="3" class="content")
        h2 ¿Qué ocurre con el estado desde que se produce el SetState hasta que la acción termina?, ¿Que valor tiene este activeState en este proceso?

        p Para ver que valor tiene nuestro estado 
            strong activeState
            |   en medio del proceso desde que se produce el 
            strong setState
            |   hasta que termina, ocuparemos el console.log

        p Entonces pondremos un console.log antes y después de la ejecución de la función de cambio de estado para que veamos el valor del estado en esta acción, es decir en el proceso del onClick.    
        img(src="../../assets/img/5-9-valor-del-estado-durante-el-render/4.webp" alt="example")

        p Primeramente miremos el renderizado inicial de los estados, el primer UserRow como valor inicial esta en true, es decir, esta Activo.
        img(src="../../assets/img/5-9-valor-del-estado-durante-el-render/5.webp" alt="example")

        p Si ahora damos click al botón del primer UserRow, miraremos que el valor que tiene el estado en la acción del onClick, es el mismo valor que se tiene en el momento actual en que se da click. 
        img(src="../../assets/img/5-9-valor-del-estado-durante-el-render/6.webp" alt="example")

        p Entonces no debemos pensar que por ejecutar este setState, en ese mismo instante se cambiará el valor del estado.
        img(src="../../assets/img/5-9-valor-del-estado-durante-el-render/7.webp" alt="example")

        p Entonces para una acción el estado mantiene siempre el mismo valor.

        p Supongamos que el estado llegará a cambiar en medio de la acción del onClick, pues tendriamos un grave problema, porque React tendria que gestionar un montón de cosas.

        p Veamos un ejemplo:

        p ¿Que ocurre si modificamos varias veces el mismo estado en una sola acción?, ¿Cuantos renderizados se producen? y ¿Que pasa con el valor del estado?
        img(src="../../assets/img/5-9-valor-del-estado-durante-el-render/8.webp" alt="example")

        p Podemos ver que toma el último setActiveState.
        img(src="../../assets/img/5-9-valor-del-estado-durante-el-render/9.webp" alt="example")

        p Esto tiene sentido, que React solo tome el último setActiveState, porque sino podriamos provocar un montón de renderizados en una misma acción. 

    article(id="4" class="content")
        h2 Cambiando el valor del estado dentro de una misma acción

        p Esto nos puede llevar a que dentro de la misma acción podamos setear un valor al inicio y luego posteriormente queramos cambiarlo y en ocaciones queremos  cambiarlo en base al valor real que tiene ese estado.

        p Este ejemplo es solo didáctico para demostrar lo que se puede hacer.

        p Lo que debemos saber es que la función de cambio de estado tambien puede recibir una función muy sencilla que recibe el valor anterior anterior del estado.

        div: pre: code.language-jsx
            | setActiveState((prevState)=>{})

        p Esta es la única manera en que la función de cambio de estado puede saber el valor del estado actual que seteamos en una misma acción.

        p Entonces para que esta función pueda cambiar el valor del estado actual se necesita setear primero el valor dentro de la misma acción.

        div: pre: code.language-jsx
            | setActiveState(valorDelEstado)
            | setActiveState((prevState)=>{
            |    /*Esta función puede saber el valor que acabamos de 
            |    setear anteriormente*/
            return !prevState
            |})

        p Sabiendo esto, nuestro código quedaría de la siguiente manera.    
        img(src="../../assets/img/5-9-valor-del-estado-durante-el-render/10.webp" alt="example")

        p Si miramos la consola podremos ver que hemos cambiado el estado dentro dentro de la misma acción, esto gracias a que primero hemos seteado un valor y posteriormente hemos tomado ese valor del estado y devolvemos un valor de estado.
        img(src="../../assets/img/5-9-valor-del-estado-durante-el-render/11.webp" alt="example")

        p.note.note--error Cabe aclarar que normalemente esto no debemos hacerlo, es decir, normalmente no hay varios 
            strong setSatate
            |   dentro de una misma acción por la misma razón que vimos en la lección anterior, no debemos ocupar setState a lo loco, no debemos hacer esto si podemos evitarlos con un simple 
            strong if
            | . Lo que realemente debemos hacer es calcular el valor del estado antes y posteriormente pasarselo al único setState.
            br
            br
            |Es decir en lugar de tener varios setState en una misma acción, solo se debe tener una sola función de cambio de estado y calcular el valor del estado previamente para despues pasarselo al único setState.

        p Entonces para no estar haciendo renderizados innecesarios teniendo dos funciones setState, tenemos que calcular el valor del estado y pasarselo al único setState, de la siguiente manera.

        img(src="../../assets/img/5-9-valor-del-estado-durante-el-render/12.webp" alt="example")

        p Entonces por norma general no tiene ningún sentido hacer varios setState dentro de una misma acción, aunque se pueda no hay que hacerlo, siempre hay que hacer las cosas de la manera correcta.


append submenu 
    -submenuLinks = [[1,'Introducción'],[2,'La función de cambio de estado no es síncrona'],[3,'¿Qué ocurre con el estado desde que se produce el SetState hasta que la acción termina?, ¿Que valor tiene este activeState en este proceso?'],[4,'Cambiando el valor del estado dentro de una misma acción']]
    +submenu(submenuLinks)