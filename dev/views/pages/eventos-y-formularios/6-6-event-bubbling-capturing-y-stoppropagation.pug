extends ../../templates/template 

append h1 
    h1 Event bubbling, capturing y stopPropagation

append content 
    article(id="1" class="content")
        h2 Introducción

        p Otro de los conceptos fundamentales que debemos de entender es que los eventos se "propagan". Esta es la razón por la que el evento originado en este botón se puede capturar tambien en el "div", es decir, en su nodo padre.

        p En esta lección aprenderemos lo que es la propagación de eventos (Event bubbling), como evitar la propagación de eventos y algo no tan común a modo de curiosidad el stopPropagation.

        p Todo esto es más un recordatorio de JavaScript.


    article(id="2" class="content")
        h2 Teoria propagación de eventos - Event bubbling

        p En el capítulo anterior mencionamos que cuando hacemos click, es decir, cuando ejecutamos un evento sobre un elemento hijo, dicho evento indirectamente hace un click hacia su padre, esto se le conoce como propagación de eventos o 
            strong Event bubbling
            |. 

        p.note La propagación 
            strong solo afecta a los manejadores del mismo tipo de evento
            | . En el caso de un click, solo se propagarán y ejecutarán los manejadores click en los elementos padres, y lo mismo sucede para cualquier otro tipo de evento (teclas, ratón, etc.).
            br
            br 
            | Algunos eventos se propagan (pueden burbujear hacia los elementos padres), mientras que otros son eventos que se disparan solo en el elemento objetivo y no se propagan.

        h3 Eventos que se propagan (bubbling):
        p La mayoría de los eventos comunes en JavaScript sí se propagan, lo que significa que se pueden detectar tanto en el elemento donde ocurrieron como en sus elementos padres, en ambas fases: captura y burbuja. Ejemplos de estos eventos incluyen:

        ul 
            li 
                p click
            li 
                p focusin (un evento relacionado con focus, pero que sí burbujea)
            li 
                p dblclick
            li 
                p keydown / keyup
            li 
                p mousedown / mouseup
            li 
                p mousemove
            li 
                p submit (en formularios)
            li 
                p input
            li 
                p change 

        h3 Eventos que no se propagan:
        p Algunos eventos, sin embargo, no 
            strong burbujean por diseño
            | , lo que significa que solo se ejecutan en el elemento objetivo y 
            strong no suben a los elementos padres
            |. Estos eventos suelen ser específicos de ciertas interacciones o cambios en el estado de un elemento. Ejemplos incluyen:

        ul 
            li 
                p 
                    strong focus / blur
                    |: Los eventos relacionados con el foco (
                    strong focus
                    |   y 
                    strong blur
                    | ) no burbujean. Sin embargo, hay un evento alternativo llamado 
                    strong focusin
                    |   y 
                    strong focusout
                    |   que sí se propagan.
            li 
                p 
                    strong mouseenter / mouseleave
                    | : Estos eventos, similares a 
                    strong mouseover
                    |   y 
                    strong mouseout
                    | , no se propagan. Solo se disparan cuando el cursor entra o sale directamente del elemento.
            li 
                p 
                    strong load / unload
                    |   : Estos eventos, que se disparan cuando una página o recurso ha terminado de cargarse, no se propagan.
            li 
                p 
                    strong scroll
                    | : El evento 
                    strong scroll
                    | , que ocurre cuando se desplaza el contenido de un elemento, tampoco se propaga.           
        h3 ¿Por qué algunos eventos no se propagan?
        p La razón por la cual algunos eventos no se propagan tiene que ver con la naturaleza de la acción que representan. Por ejemplo:

        ul 
            li 
                p Eventos como 
                    strong focus
                    |   y 
                    strong blur
                    |   están diseñados para aplicarse específicamente a un solo elemento que obtiene o pierde el foco.
            li 
                p Eventos como 
                    strong mouseenter
                    |   y 
                    strong mouseleave
                    |   se enfocan en las interacciones directas del mouse con un elemento específico, por lo que no tiene sentido que se propaguen a los padres.

        h3 Resumen:
        ul 
            li 
                p 
                    strong Eventos que se propagan
                    | : La mayoría de los eventos de interacción (clic, teclado, movimiento del mouse, etc.).

            li 
                p 
                    strong Eventos que no se propagan
                    |: Eventos como focus, blur, mouseenter, mouseleave, load, y scroll.                        

    article(id="3" class="content")
        h2 Ejemplo propagación eventos       

        p La propagación de eventos es algo que sucede de forma automática, es un comportamiento por defecto de JavaScript, cuando sucede cualquier evento en un elemento del DOM, primero se busca si ese elemento tiene asociado algún handle del evento, en nuestro caso es el evento "onClick". Una vez que termina de ejecutar ese handle si es que lo hay, pasa a su elemento padre, en nuestro caso al "div" y si este tiene asociado un handle del evento, de igual manera se sigue propagando hacia arriba.

        p Para que nos quede mas claro, miremoslo con un ejemplo: 

        p Pondremos dos eventos "onClick" uno para el div y otro para el botón.

        img(src="../../assets/img/6-6-event-bubbling-capturing-y-stoppropagation/1.webp" alt="example")
        p Si damos click al botón miraremos que se ejecuta el handle del button, y como ya vimos que cuando hacemos click a un elemento que tiene un manejador de eventos (handle), hace click de manera indirecta sobre el padre, lo que se conoce como 
            strong Event bubbling
            |, de tal manera que si este padre tiene un handle, tambien se ejecutará, de tal manera que podremos ver el resultado de ese handle.

        p Miremoslo en pantalla:    
        img(src="../../assets/img/6-6-event-bubbling-capturing-y-stoppropagation/2.webp" alt="example").has-mb

    article(id="4" class="content")
        h2 stopPropagation 
        p En el proceso de 
            strong event bubbling
            | , lo que sucede es lo siguiente:

        ol 
            li 
                p Se dispara un evento en un elemento hijo (por ejemplo, un botón).
            li 
                p El navegador verifica si ese elemento tiene un "handle" (una función manejadora) asociado al evento, como 
                    strong onClick
                    |.
            li 
                p Si existe un manejador, se ejecuta.
            li 
                p Luego, el evento se propaga hacia arriba a través de los elementos padres, y lo mismo ocurre: si alguno de los padres tiene un "handle" para el evento, también se ejecutará, y así sucesivamente hasta llegar al documento raíz, a menos que se detenga explícitamente la propagación con 
                    strong.ts-2 event.stopPropagation()
                    | .

        p Como vemos, la propagación de eventos puede ir subiendo hasta llegar al documento raíz, entonces de manera explícita podemos detener esta propagación para que se quede solamente donde hemos interactuado, donde hemos hecho click.          
        img(src="../../assets/img/6-6-event-bubbling-capturing-y-stoppropagation/3.webp" alt="example")

        p Si hacemos click, miraremos que el evento ya no se propaga, sino que solo se ejecutará el handle del botón, que es donde inicialmente dimos click.

        img(src="../../assets/img/6-6-event-bubbling-capturing-y-stoppropagation/4.webp" alt="example").has-mb


    article(id="5" class="content")
        h2 Fase de Captura

        p Cuando nosotros hablamos de esta propagación de eventos, normalmente nos estamos refiriendo al 
            strong Event bubbling
            | , pero esta no es la única forma que tiene JavaScript de propagar estos eventos sino que antes de la fase de 
            strong bubbling
            |   se produce otra fase que debemos conocer y es conocida como la 
            strong fase de captura
            |   y esto es algo que pocas personas conocen porque realmente no es habitual usarlo, ya que lo más habitual es tratar los eventos en su fase de 
            strong bubbling
            |. 

        p En que consiste esta captura y como se puede llevar acabo en React, ya que tenemos una forma especial de hacerlo.

        p Cuando queremos capturar un evento con addEventListener, lo que se hace es pasar un parámetro adicional que indique la captura. 

        p Pero en React, esto se hace de una manera distinta. Cuando queremos capturar un evento en su fase de captura que se produce antes de la fase de "bubbling"  tenemos que pasarle como propiedad el mismo evento que queremos capturar pero seguido de la palabra "Capture", si es un onClick, sería "onClickCapture".
        img(src="../../assets/img/6-6-event-bubbling-capturing-y-stoppropagation/5.webp" alt="example")

        p Si damos click en el botón, miraremos que el "onClickCapture" se ejecuta antes que el "bubbling" y a demás se ejecuta de arriba hacía abajo.

        img(src="../../assets/img/6-6-event-bubbling-capturing-y-stoppropagation/6.webp" alt="example")

        p.note.note--warning Y ¿Por qué esta fase de captura es muy poco conocida?, pues porque su utilidad es bastante reducida, es decir, 
            strong en la vida real hablar de una fase de captura de eventos normalmente está asociado a una mala práctica, normalmente siempre que queramos trabajar con un evento lo haremos desde su fase de "bubbling."

        p  Esto simplemente lo vemos como curiosidad, pero en realidad el 99.99999% de los casos nunca lo ocuparemos, pero siempre hay que conocer estos temas por si alguna vez los llegaramos a ocupar.  

append submenu 
    -submenuLinks = [[1,'Introducción'],[2,'Teoria propagación de eventos - Event bubbling'],[3,'Ejemplo propagación eventos'],[4,'stopPropagation'],[5,'Fase de Captura']]
    +submenu(submenuLinks)