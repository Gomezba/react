extends ../../templates/template 

append h1 
    h1 Componentizar

append content 
    article(id="1" class="content")
        h2 Introducción
        p Ahora que ya hemos refactorizado la lógica de nuestro componente, llega el momento de componentizar, es decir, detectar pequeños componentes que forman parte de este componente 
            strong UsersList
            |   que se pueden individualizar para separar mucho mas las responsabilidades de cada uno.

    article(id="2" class="content")
        h2 Creación componente UsersListFilters

        p El primer caso es claramente, el formulario de filtros que podriamos aislar en un componente llamado 
            strong UsersListFilters
            |   para poder compactar aún mas todo este código JSX y que no sea tan grande, ya que pensando en una tabla, probablemente en un futuro tengamos mucho más elementos y tener un código JSX enorme no nos va ayudar, ni a la legibilidad ni por supuesto a la mantenibilidad de este componente. 

        p Así que aislaremos este formulario y de este forma tendremos un componente sencillo que sirve para la parte de presentación de estos filtros.

        p El componente viene determinado de quien es su padre, y su padre es 
            strong UsersList
            |   entonces este componente hijo se llamará 
            strong UsersListFilters
            |   ya que su nombre tiene que guardar algún tipo de relación con su padre.     

        img(src="../../assets/img/7-7-componentizar/1.webp" alt="example") 

        p Estilos modularizados   
        img(src="../../assets/img/7-7-componentizar/2.webp" alt="example") 

        p En el componente 
            strong UsersList
            |   importamos el componente de 
            strong UsersListFilters
            |   y lo ejecutamos pasandole las props, que es el estado y su respectiva función de actualización de estado.
        figure 
            img(src="../../assets/img/7-7-componentizar/3.webp" alt="example")
            figcaption Los estados tienen que seguir manteniendose dentro de este 
                strong UsersList
                |   porque al final vamos a estar utilizandolos para filtrar los usuarios activos, los usuarios por nombre y posteriormente ordenarlos. Así que no podemos trasladarlos directamente al componente 
                strong UsersListFilters
                |   ya que no solo afecta a 
                strong UsersListFilters
                |   sino que tambien necesitamos los estados  
                strong en el renderizado de las listas
                |, hay que recordar que los estados deben ir lo más cerca y accesible a todo lo que los necesite.

        p Nuestra lista de usuarios funciona correctamente. 
        img(src="../../assets/img/7-7-componentizar/4.webp" alt="example")

    article(id="3" class="content")
        h2 Creación componente UsersListRows 
        p Podiamos decir que ya hemos termiando y que hemos componentizado todo lo que podiamos componentizar, pero vamos a hecharle un vistazo a la función 
            strong renderUsers.

        img(src="../../assets/img/7-7-componentizar/5.webp" alt="example")

        p Como podemos ver, 
            strong rendersUsers
            |   es una función que por un lado devuelve JSX y por otro lado devuelve JSX, ya hemos comentado que cuando una función devuelve JSX, esta debería ser un componente.

        p Entonces pasaremos a convertir esta función en un componente con el nombre 
            strong UsersListRows
            |   y su nombre tiene una semantica que indica que son las filas de las tabla de usuarios y por supuesto tendrá que recibir una prop que es users.  
        img(src="../../assets/img/7-7-componentizar/6.webp" alt="example")

        p Ahora ejecutamos el componente.
        img(src="../../assets/img/7-7-componentizar/7.webp" alt="example")

        h3 Modularizando componente UsersListRows
        p Hasta este punto tenemos un problema y es que estamos teniendo dos componentes en un mismo archivo 
            strong UsersList
            |   y 
            strong UsersListRows
            | , y esto ya sabemos que no está permitido.

        p Entonces craremos nuestro archivo propio para este componente llamado 
            strong UsersListRows
            |   e importamos lo necesario para que funciones, que en este caso es importar el componente 
            strong UserRow.
        img(src="../../assets/img/7-7-componentizar/8.webp" alt="example")

        p Ahora simplemente importamos este componente en 
            strong UsersList.

        img(src="../../assets/img/7-7-componentizar/9.webp" alt="example").has-mb

    article(id="4" class="content")
        h2 Conclusiones   

        p Ahora si ya tenemos nuestro componente perfectamente funcional y modularizada su lógica mucho más. 

        p Ahora simplemente tenemos una parte que se encarga de los filtros de los usuarios y de la gestión de estos usuarios. 

        div: pre: code.language-jsx
            |const [search, setSearch] = useState('')
            |const [onlyActive, setOnlyActive] = useState(false)
            |const [sortBy, setSortBy] = useState(0)
            |
            |let usersFiltered = filterActiveUsers(users, onlyActive)
            |usersFiltered = filterUsersByName(usersFiltered, search)
            |usersFiltered = sortUsers(usersFiltered, sortBy)

        p Y tenemos las funciones correspondientes a cada uno de estos filtros, es decir, tenemos la lógica asociada.  

        div: pre: code.language-jsx
            |const filterUsersByName = (users, search) => {...}
            |
            |const filterActiveUsers = (users, active) => {...}
            |
            |const sortUsers = (users, sortBy) => {...}

        p Como vemos al final vamos dividiendo en pequeñas responsabilidades cuando vemos que un componente tiene una responsabilidad demasiado grande y que lo hace mas complicado de manejar y esto es una cuestión puramente personal.

        p Por ejemplo hay gente que el patrón de haber divido el componente 
            strong UsersListRows
            |   que antes era una función que devolvia JSX, no lo ven todo aceptable el haber convertido esa función a un componente y prefieren utilizar la sintaxis que teniamos anteriormente, y esto es valido si claro que si, pero considearamos que es mucho más eficiente y mucho mas legible, tener separada la lógica de pintar y por otro lado tener el componente fuera. 

        p Entonces nuestro 
            strong UsersList
            |   simplemente se encarga de orquestar todo. 

        p Así que vamos analizar y ver que podemos hacer con estos estado, pero en el siguiente capítulo.    

append submenu 
    -submenuLinks = [[1,'Introducción'],[2,'Creación componente UsersListFilters'],[3,'Creación componente UsersListRows '],[4,'Conclusiones']]
    +submenu(submenuLinks)