extends ../../templates/template 

append h1 
    h1 Modularización y ES Módules

append content 
    article(id="1" class="content")
        h2 Modularización de código
        p Como en todo proyecto a medida que el código crece, surge la necesidad de modularizar, es decir separar nuestro código en distintos archivos y utilizar una sintaxis de 
            code import
            |   y 
            code export
            |   para utilizarlos.

        p Lo primero que haremos es dejar nuestra estructura de la siguiente manera, pero guardaremos el código que teniamos anteriormente en 
            strong index-alt.js, ya que lo modularizaremos en arhivos por separado.

        img(src="../../assets/img/2-4-modularizacion-y-es-modules/1.png" alt="example")

        p Nuestro código modularizado queadría de la siguiente manera
        p: strong.ts-1 data.js     
        img(src="../../assets/img/2-4-modularizacion-y-es-modules/2.png" alt="example")

        p: strong.ts-1 component.js     
        img(src="../../assets/img/2-4-modularizacion-y-es-modules/3.png" alt="example")

        p: strong.ts-1 render.js     
        img(src="../../assets/img/2-4-modularizacion-y-es-modules/4.png" alt="example")

        p: strong.ts-1 .babelrc
        figure 
            img(src="../../assets/img/2-4-modularizacion-y-es-modules/5.png" alt="example")
            figcaption Hemos agregado una configuración para que el código resultado sea con ESM.

        p Ahora ejecutamos el siguiente comando que transpilará la carpeta 
            strong src
            |   y creara un directorio llamado 
            strong dist
            |   en la raíz de nuestro proyecto.
        p: code npx babel src -d dist

        p Así quedaría nuestra carpeta 
            strong dist
            |   generada, y su código transpilado con ESM.
        img(src="../../assets/img/2-4-modularizacion-y-es-modules/6.png" alt="example")

        p Por último cambiaremos nuestro script a la nueva versión transpilada.
        div.has-mb: pre: code.language-html 
            |&lt;!DOCTYPE html&gt;
            |&lt;html lang="es"&gt;
            |	&lt;head&gt;
            |		&lt;meta charset="UTF-8" /&gt;
            |		&lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;
            |		&lt;title&gt;Document&lt;/title&gt;
            |		&lt;link rel="stylesheet" href="css/styles.css" /&gt;
            |         &lt;!-- Cambiamos la ruta a la nueva versión transpilada y específicamos que el archivo es de tipo module  --&gt;
            |		&lt;script src="./dist/render.js" type="module" defer&gt;&lt;/script&gt;
            |		&lt;script src="https://unpkg.com/react@18/umd/react.development.js"&gt;&lt;/script&gt;
            |		&lt;script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"&gt;&lt;/script&gt;
            |	&lt;/head&gt;
            |	&lt;body&gt;
            |		&lt;div id="root"&gt;&lt;/div&gt;
            |	&lt;/body&gt;
            |&lt;/html&gt;
        img(src="../../assets/img/2-4-modularizacion-y-es-modules/7.png" alt="example").has-mb

    article(id="2" class="content")
        h2 Navegador con ESM 
        p Ahora toca hablar de los ESM y de como el navegador los carga, para ello nos vamos a la pestaña de 
            strong Network
            |   en el navegador y filtramos por archivos JS y desabilitamos la caché.
        img(src="../../assets/img/2-4-modularizacion-y-es-modules/8.png" alt="example")

        p Ahora recargamos la página y lo que vemos, es el orden en que se ejecutan nuestros archivos JS, estos vienen de nuestro HTML.
        img(src="../../assets/img/2-4-modularizacion-y-es-modules/9.png" alt="example")

        p Recordemos que nuestro archivo 
            strong render.js
            |   es el que importa el código de los archivos de 
            strong data.js
            |   y 
            strong component.js
            |   , y para que 
            strong render.js 
            |   pueda ocupar esos archivos lo que hace es hacer otras 2 peticiones, una para 
            strong data.js 
            |   y otra para 
            strong component.js
        img(src="../../assets/img/2-4-modularizacion-y-es-modules/10.png" alt="example")

        h3 El ¿Por qué hay que empaquetar nuestros archivos?

        p Lo de la imagen anterior en sí no es un problema realmente, pero puede llegar a serlo cuando estamos en producción. ¿Por qué? Porque cuando estamos en desarrollo, las peticiones las hacemos nosotros mismos, y van dirigidas hacia nuestra propia máquina. Es decir, tenemos un único usuario (nosotros), y nuestra propia máquina es la que nos responde. En este caso, las solicitudes van desde nuestra máquina hasta nuestra máquina, por lo que la latencia de red es nula. Sin embargo, cuando llegamos a producción en un escenario real, podemos tener miles de usuarios. 

        p En un proyecto real, evidentemente no habrá solo 3 archivos; puede haber 100, 200 o incluso 500 en una misma página. Si cada usuario que visita la página tiene que cargar entre 100 y 500 archivos, podemos encontrarnos con una cantidad ingente de peticiones al servidor. Todas estas peticiones, evidentemente, tienen un pequeño retraso debido al tiempo que tarda el servidor en responder. Además, si se acumulan demasiadas peticiones, nuestro servidor podría saturarse simplemente por responder a todas ellas.

        p Entonces, ¿qué se suele hacer para evitar esto? Pues se suelen juntar todos estos archivos en uno solo cuando generamos la versión transpilada. Esto se conoce como 
            strong.ts-3 empaquetado
            |   o 
            strong.ts-3 bundle
            | , y es lo que hacen los archivos 
            strong react.development.js
            |   y 
            strong react-dom.development.js
            | , como podemos observar en la pestaña "Sources" de los archivos de unpkg.com.

        img(src="../../assets/img/2-4-modularizacion-y-es-modules/11.png" alt="example")

        p Para poder realizar este empaquetado, necesitamos una herramienta adicional a Babel: un empaquetador.


append submenu 
    -submenuLinks = [[1,'Modularización de código'],[2,'Navegador con ESM ']]
    +submenu(submenuLinks)