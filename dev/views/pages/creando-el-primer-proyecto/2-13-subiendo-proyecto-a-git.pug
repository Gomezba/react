extends ../../templates/template 

append h1 
    h1 Subiendo el proyecto a git

append content 
    p Ya tenemos nuestro proyecto de React configurado y listo para funcionar, el motivo por el cúal hemos invertido bastante teoría es porque toda esta configuración final será nuestra plantilla para proyectos con React. De esta manera no tendremos que volver a configurar todo esto de nuevo.

    p Lo que haremos a continuación es subir este proyecto a 
        strong GitHub
        |   para tenerlo como plantilla y crear proyectos más adelante con ella.

    p Pero antes de esto, veremos los conflictos que podemos llegar a tener con el tiempo.

    p Este proyecto base, va a convivir durante el tiempo con todas las actualizaciones de todos los paquetes que vayan surgiendo, y al final esto puede llegar a ser un problema. 

    p Durante todas esas actualizaciones puede que haya 
        strong issues
        | , puede que algo deje de funcionar, o que algo funcione de manera distinta.

    h3 Problema con dependencias

    p Si vemos el 
        strong "package.json"
        |   podemos ver las vesiones de las dependencias que estamos utilizando.

    img(src="../../assets/img/2-13-subiendo-proyecto-a-git/1.webp" loading="lazy" alt="example") 

    p El problema de esto, es que, si después queremos actualizar nuestros paquetes, puede que nuestra configuración deje de funcionar, y esto no es único de nuestro proyecto si no de cualquier proyecto.

    p Lo que debemos hacer siempre, es fijar nuestras dependencias en cualquier proyecto que emprendamos.

    article(id="1" class="content")
        h2 Problema de no fijar las dependencias
        p Si nosotros vemos el 
            strong "packgage.json"
            |   en las versiones de nuestras dependencias tenemos un 
            strong caret o acento circunflejo (^)
            | .
        img(src="../../assets/img/2-13-subiendo-proyecto-a-git/2.webp" loading="lazy" alt="example") 

        p: strong.ts-3 ¿Qúe es este caret ^ ?

        p Cuando nosotros hacemos un 
            strong "npm i"
            |   para instalar las dependencias de 
            strong Vite
            |   o de cualquier otro proyecto, es cuando se agregan estos carets 
            strong (^)
            | .

        p Lo que indican estos carets por ejemplo en el caso de 
            strong react:       
        img(src="../../assets/img/2-13-subiendo-proyecto-a-git/3.webp" loading="lazy" alt="example") 

        p Indica que cuando nosotros hagamos un 
            strong npm i 
            | , 
            strong npm
            |   puede instalar esta versión 
            strong "^18.3.1"
            |   o cualquier versión menor superior a esta.

        p ¿Qué significa esto? Si por ejemplo en 
            strong react
            |   sacan una versión 
            strong "minor" 
            strong.ts-2 "18.4.1"
            | , cuando yo haga un 
            strong npm i
            |   aunque en el 
            strong "package.json"
            |   del proyecto tenga 
            strong "react": &nbsp;"^18.3.1"
            | , 
            strong npm
            |   me instalará la siguiente versión que este publicada en los servidores de 
            strong npm
            | , siempre y cuando no sea una versión 
            strong "major"
            |  , es decir, siempre y cuando no sea una versión 
            strong.ts-2 19.0.0
            | .

        p Si no fijas tus dependencias puede ser que tú tengas una dependencia inclusive en una maquína, en otra tengas otra, y a lo mejor un compañero de equipo haya hecho un 
            strong npm i
            |   despúes que tú y se le haya instalado la versión 
            strong "18.4.1"
            |   y a lo mejor lo que a él le funciona a ti no.    

    article(id="2" class="content")
        h2 Fijando las dependencias
        p Siempre debemos fijar nuestras dependencias, cuando hablamos de 
            strong fijar las dependencias
            | , nos referimos a dejar establecidas las dependencias en una sola versión para toda la vida del proyecto. Esto lo logramos quitando los 
            strong carets
            | . 

        p Algo que debemos saber, cundo queramos instalar una dependencia y queremos que quede fijada de una vez, es decir que no se le agregue el caret, debemos de agregar el prefijo -E.

        p: code npm i nombreDependencia -E

        p En nuestro caso fijaremos las dependencias, quitando los carets de manera manual.
        figure 
            img(src="../../assets/img/2-13-subiendo-proyecto-a-git/4.webp" loading="lazy" alt="example") 
            figcaption Ya hemos quitado los carets de manera manual.

        p Su ahora ejecutamos un 
            strong npm i
            |   vamos a ver si alguno de estos paquetes realmente estaba en una versión superior a la que estaba marcada.

        figure 
            img(src="../../assets/img/2-13-subiendo-proyecto-a-git/5.webp" loading="lazy" alt="example") 
            figcaption Podemos ver que efectivamente hay 9 paquetes que han cambiado, es decir había 9 paquetes que no estaban explícitamente puesta en el 
                strong package.json
                |. 

        p Cuando ejecutamos 
            strong npm i
            | , cambiamos 9 paquetes, y recibimos varias advertencias sobre la incompatibilidad de la versión de 
            strong Node.js
            |   con las versiones mínimas requeridas por algunos de esos paquetes.        

        p Todos estos paquetes son componentes clave de ESLint o herramientas relacionadas que necesitan una versión más reciente de 
            strong Node.js (>= 18.18.0)
            |. Actualmente, tenemos la versión 
            strong 18.17.0
            | , lo cual es muy cercana, pero no lo suficiente para evitar estos avisos.

        p Para solucionar esto debemos actualizar 
            strong Node.js
            |   a una versión compatible 
            strong (18.18.0 o superior)
            |   resolvería estas advertencias.

        p Con todo esto podemos imaginarnos la cantidad de problemas que puede haber.

    article(id="3" class="content")
        h2 Actualizar dependencias antes de subir repositorio

        p Para evitar problemas, antes de subir nuestro repositorio, actualizaremos las versiones de nuestras dependencias. Pero cabe aclarar que antes, debemos revisar la documentación de las dependencias para no romper nuestra configuración, es decir, siempre hay que actualizar pero con conocimiento, verificando antés que nada rompa nuestra app.

        p Una manera de actualizar las dependencias es utilizando el comando: 
        p: code npx npm-check -u -E 

        p Sirve para revisar el estado de las dependencias en tu proyecto de Node.js y asegurarte de que todo esté actualizado.

        ul 
            li 
                p 
                    strong npx
                    | : Ejecuta paquetes de 
                    strong npm
                    |   sin necesidad de instalarlos globalmente. En este caso, ejecuta 
                    strong npm-check
                    | .
            li 
                p 
                    strong npm-check
                    | : Es una herramienta que ayuda a revisar cuáles dependencias están desactualizadas, se pueden eliminar o actualizar, y cuáles tienen problemas. Muestra un resumen claro de lo que necesitas actualizar.
            li 
                p 
                    strong -u
                    | : Activa el modo interactivo, donde se abre una interfaz en la consola que te permite seleccionar manualmente (presionando space) qué dependencias deseas actualizar, en lugar de hacerlo automáticamente para todas.

            li 
                p 
                    strong -E
                    | : Este modificador asegura que cuando actualices dependencias, las nuevas versiones se guardarán con el número exacto en el archivo package.json, eliminando los rangos flexibles como 
                    strong ^
                    |   o 
                    strong ~
                    | . Por ejemplo, en lugar de 
                    strong "react": "^17.0.1"
                    | , quedará 
                    strong "react": "17.0.1"
                    | .

        p Al ejecutar este comando, en nuestro caso miraremos lo siguiente.
        img(src="../../assets/img/2-13-subiendo-proyecto-a-git/6.webp" loading="lazy" alt="example") 

        p Ahora exmplicaremos la lista de sugerencias de actualización que nos sugiere.

        p: strong.ts-3 1. Patch Update (Actualizaciones de parche)
        p Estas son actualizaciones menores que incluyen correcciones de errores, pero no introducen nuevas características ni rompen compatibilidad.
        ul 
            li 
                p 
                    strong @types/react
                    | : Actualización de 
                    strong 18.3.3 
                    |   a 
                    strong 18.3.7
                    | . Son solo tipos para 
                    strong TypeScript
                    | , por lo que es una actualización que no afectará el funcionamiento de nuestro proyecto, pero sí podría mejorar la validación de tipos.
            li 
                p 
                    strong vite
                    | : Actualización de 
                    strong 5.4.1
                    |   a 
                    strong 5.4.6
                    | . Esta versión corrige errores pero mantiene la compatibilidad, así que es seguro aplicarla.

        p: strong.ts-3 2. Minor Update (Actualizaciones menores)
        p Estas actualizaciones incluyen nuevas funcionalidades compatibles con versiones anteriores, sin romper la compatibilidad.
        ul 
            li 
                p 
                    strong @eslint/js
                    | : Actualización de 
                    strong 9.9.0
                    |   a 
                    strong 9.10.0
                    | . Nuevas funciones para las reglas de ESLint que podrían ofrecer más opciones en el análisis de código.
            li 
                p 
                    strong @vitejs/plugin-react-swc
                    | : De 
                    strong 3.5.0
                    |   a 
                    strong 3.7.0
                    | . Agrega nuevas funcionalidades para integrar 
                    strong React
                    |   con 
                    strong Vite
                    |   usando 
                    strong SWC
                    | .

            li 
                p 
                    strong eslint
                    | : De 
                    strong 9.9.0
                    |   a 
                    strong 9.10.0
                    | . Nuevas reglas o mejoras en la herramienta de análisis estático de código.

            li 
                p 
                    strong eslint-plugin-react
                    | : De 
                    strong 7.35.0
                    |   a 
                    strong 7.36.1
                    | . Mejora en las reglas específicas para React.

        p: strong.ts-3 3. Non-Semver Versions (Versiones no semánticas)
        p Estas actualizaciones son para versiones que aún están por debajo de la versión 1.0.0. Esto significa que aún podrían introducir cambios importantes, aunque sin romper compatibilidad.
        ul 
            li 
                p 
                    strong eslint-plugin-react-refresh
                    | : De 
                    strong 0.4.9
                    |   a 
                    strong 0.4.12
                    | . Es una actualización dentro de una versión aún en desarrollo, por lo que podría haber mejoras y correcciones, pero podría no ser completamente estable.

        p Sabiendo esto, actualizaremos las siguientes dependencias.
        img(src="../../assets/img/2-13-subiendo-proyecto-a-git/7.webp" loading="lazy" alt="example") 

        p Una vez actualizadas nuestras dependencias, para que funcionen correctamente utilizaremos una versión de 
            strong NodeJS
            |   requerida para las dependencias.

        p En nuestro caso utilizamos 
            strong NodeJS
            |   con 
            strong "fnm"
            |   que nos permite tener instaladas diferentes versiones de 
            strong NodeJS
            | , en nuestro caso instalaremos la versión 
            strong "20.17.0"
            |   que actualemente es actualmente la vesión más reciente en este momento (Sep/2024).

        p Instalamos nuestra versión de Node con el comando: 
        p: code fnm install 20.17.0     
        img(src="../../assets/img/2-13-subiendo-proyecto-a-git/8.webp" loading="lazy" alt="example")

        p Ahora procedemos a establecer la versión por defecto con el comando: 
        p: code fnm alias 20.17.0 default
        p Y mostraremos la lista de versiones de Node para ver que ya tenemos una versión establecida por defecto.
        img(src="../../assets/img/2-13-subiendo-proyecto-a-git/9.webp" loading="lazy" alt="example")

        p En dado caso tengamos un problema con esta versión podemos escoger otra versión por defecto que sea más estable.

        p Ahora para validar que la actualización de nuestras dependencias son correctas, siempre debemos subir el archivo 
            strong "package-lock.json"
            | , es así porque si hemos actualizado una dependencia y el 
            stribg package-lock.json
            |   cambia, podemos detectar que hay alguna versión que no está exactamente funcionando como deberia, así que debemos de utilizarlo siempre como respaldo y al ser un archivo autogenerado, no nos interesaría que nadie lo formatiase sin querer, es decir, no queremos ocupar 
            strong Prettier
            |   sobre el. 

        p Así que agregaremos el 
            strong "package-lock.json"
            |   al archivo 
            strong ".prettierignore"
            |   para que no actue sobre el.

        img(src="../../assets/img/2-13-subiendo-proyecto-a-git/10.webp" loading="lazy" alt="example")

        p Una vez que hemos terminado de quitar los carets, de actualizar las dependencias y demás, lo que haremos es subir nuestro proyecto al repositorio en 
            strong GitHub.

    article(id="4" class="content")
        h2 Subiendo proyecto a GitHub
        p En la consola de nuestro proyecto inicializaremos 
            strong "Git"
            |   y ejecutaremos los siguientes comandos.

        div: pre: code.language-bash 
            | git init 
            | git add . 
            | git commit -m "First commit"  

        p Ahora crearemos nuestro repositorio en 
            strong GitHub
            | .    
        img(src="../../assets/img/2-13-subiendo-proyecto-a-git/11.webp" loading="lazy" alt="example")

        p Copiamos los siguientes comandos.  
        img(src="../../assets/img/2-13-subiendo-proyecto-a-git/12.webp" loading="lazy" alt="example")
        p Los pegamos en la consola de nuestro proyecto.
        img(src="../../assets/img/2-13-subiendo-proyecto-a-git/13.webp" loading="lazy" alt="example")
        p Ya tenemos nuestro repositorio subido en 
            strong GitHub
        img(src="../../assets/img/2-13-subiendo-proyecto-a-git/14.webp" loading="lazy" alt="example")
        p Ahora estableceremos nuestro repositorio como 
            strong plantilla
            | . 
        img(src="../../assets/img/2-13-subiendo-proyecto-a-git/15.webp" loading="lazy" alt="example")
        p Ahora ya podemos crear repositorios a través de esta plantilla.
        img(src="../../assets/img/2-13-subiendo-proyecto-a-git/16.webp" loading="lazy" alt="example")

append submenu 
    -submenuLinks = [[1,'Problema de no fijar las dependencias'],[2,'Fijando las dependencias'],[3,'Actualizar dependencias antes de subir repositorio'],[4,'Subiendo proyecto a GitHub']]
    +submenu(submenuLinks)