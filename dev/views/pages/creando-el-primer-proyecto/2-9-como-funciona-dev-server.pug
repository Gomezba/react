extends ../../templates/template 

append h1 
    h1 Cómo funciona el dev server

append content 
    article(id="1" class="content")
        h2 Servidor frontal
        p Cuando ejecutamos 
            strong npm run dev 
            |   o 
            strong npm run preview 
            |   en 
            strong Vite
            | , lo que estamos haciendo es levantar un 
            strong servidor frontal 
            |  . 

        p La tarea de este 
            strong servidor frontal
            |   es doble.

        h3 1 Tarea: Servir archivos estáticos  

        p Por un lado servir archivos estáticos que van desde JS o CSS hasta imagenes, videos o cualquier otro archivo como puede ser un simple PDF o un documento XML, a todos estos archivos el usuario accede mediante una URL concreta que parte siempre desde un directorio raíz, que es lo que consideramos (/).

        p Por eso cuando nosotros en un 
            strong index.html 
            |   escribimos por ejemplo 
            strong.ts-3 "/src/favicon.svg"
            |   estamos estableciendo una ruta partiendo de una barra (/) que es el directorio raíz que variará en función de los servidores, para 
            strong desarrollo
            |   será una y para 
            strong producción o preview
            |   será otra. 

        h3 2 Tarea: Servir páginas  
        p La segunda tarea es la de servir 
            strong páginas
            | , en este caso como el servidor frontal está configurado para React, todas las páginas serán redireccionadas al 
            strong index.html
            |   ya que la gestión de rutas típicas que suele haber en un servidor frontal en este caso se realiza desde JavaScript dentro del 
            strong main.jsx
            |   y esto lo veremos mucho más adelante.

    article(id="2" class="content")
        h2 Entendiendo el servidor de desarrollo

        p Lo que tenemos que entender ahora es como funciona este servidor frontal y como resuelve las distintas peticiones 
            strong get
            |   de 
            strong HTTP
            |   que recibe a través del navegador, que reglas está utilizando para determinar si debe servir un archivo estático o una página o simplemente devolver un 
            strong error 404
            | .

        p Para entender el servidor de desarrollo vamos a empezar por levantar nuestro 
            strong servidor de desarrollo
            |   con : 

        p: code npm run dev

        p Para este 
            strong servidor de desarrollo
            |   su raíz será toda la carpeta del proyecto, es decir, la carpeta 
            strong First-Project

        img(src="../../assets/img/2-9-como-funciona-dev-server/1.webp" alt="example").img-md

        p Por eso cuando nosotros buscamos desde la barra de navegación, por ejemplo: 
            strong "/src/assets/react.svg"
            |   vemos que el recurso al que queremos acceder, se puede acceder sin problema.    
        img(src="../../assets/img/2-9-como-funciona-dev-server/2.webp" alt="example") 

        p Ahora tenemos que entender la prioridad de este servidor y es que su prioridad es 
            strong siempre buscar archivos estáticos
            | , es decir, si existe un archivo estático que coincida con alguna ruta, lo devolverá sobre cualquier cosa.

        p Solo en el caso de que encuentre una ruta que no coincida con ningún archivo, por ejemplo: 
            strong "/asd"
            |   lo interpretará como una 
            strong página
            |   y no como un archivo estático.   

        figure 
            img(src="../../assets/img/2-9-como-funciona-dev-server/3.webp" alt="example").img-md
            figcaption.ts-1 En este casó como en todas las páginas nos devuelve el 
                strong index.html
                |   es por eso que podemos ver el logo, recordemos que en el index.html estamos cargando el logo de React.

        div.ts-2 
            div El comportamiento que observamos en la imagen de arriba, donde 
                strong Vite
                |   redirige al 
                strong index.html
                |   cuando la ruta que intentamos acceder no coincide con ningún archivo estático o una página válida, está relacionado con el soporte para 
                strong SPAs
                | . En aplicaciones como React, la redirección automática al index.html asegura que cualquier ruta que no sea un archivo estático pero sea válida dentro del sistema de rutas del cliente (React Router, por ejemplo), funcione correctamente.

            div Este comportamiento se controla a través de la configuración del 
                strong middleware
                |   de Vite, que utiliza una estrategia llamada 
                strong "history fallback"
                |   o 
                strong "HTML5 history API fallback"
                | . Esto significa que si no se encuentra un archivo estático que coincida con la ruta, el servidor automáticamente devuelve index.html, de modo que la aplicación React pueda manejar la ruta.        

        p Pero para comprobar que esto es así, crearemos un archivo en la raiz de nuestro proyecto que se llame 
            strong asd
            | , y pondremos un simple saludo.         

        img(src="../../assets/img/2-9-como-funciona-dev-server/4.webp" alt="example") 

        p Entonces si volvemos hacer la petición que habiamos hecho antes 
            strong "/asd"
            | , como existe un archivo estático que coincide con la ruta, pues lo mostrará en pantalla.
        img(src="../../assets/img/2-9-como-funciona-dev-server/5.webp" alt="example").img-md

        p.note En resumen, cualquier ruta que no coincida inicialmente con un archivo estático será tratada como una página. Si la ruta no coincide con ninguna página o si esa página no existe, 
            strong Vite
            |   redireccionará automáticamente al 
            strong index.html
            |.

        h3 Carpeta public    
        p Pero a mayores de esto, recordemos que tenemos la carpeta 
            strong public
            |   donde deben alojarse los 
            strong archivos estáticos
            | , entonces cualquier archivo estático que exista dentro de esta carpeta, nuestra carpeta 
            strong public
            |   será tratada como si fuera la raíz de nuestro proyecto y se le dará proridad sobre todos los demás. 

        p Pongamos a prueba esto, crearemos dentro la carpeta 
            strong public
            |   un archivo que tambien se llame 
            strong "asd"
            |   y escribiremos un texto por ejemplo: 
            strong "Hola desde public"
            | .      
        img(src="../../assets/img/2-9-como-funciona-dev-server/6.webp" alt="example").img-md

        p Recordemos que ya tenemos un archivo llamado 
            strong "asd"
            |   en la raíz de nuestro proyecto, y a su vez hemos creado otro archivo tambien llamado 
            strong "asd"
            |   que se encuentra dentro de la carpeta 
            strong public
            | .
        img(src="../../assets/img/2-9-como-funciona-dev-server/7.webp" alt="example").img-md

        p Si ahora volvemos hacer la petición a la ruta 
            strong "/asd"
            |   miraremos que toma como prioridad los archivos estáticos que se encuentren dentro de la carpeta 
            strong public
            | .
        img(src="../../assets/img/2-9-como-funciona-dev-server/8.webp" alt="example").img-md

        p Entonces cuando encontremos 2 archivos que coincidan con el mismo nombre, siempre se le dará la prioridad al que se encuentre dentro de 
            strong public
            | , veremos que está carpeta 
            strong public
            |   es muy importante cuando lleguemos hablar del servidor de 
            strong preview
            | .

        div.note
            ul 
                li Cuando encontremos 2 archivos que coincidan con el mismo nombre, siempre se le dará la prioridad al que se encuentre dentro de public

                li 
                    div Todos los archivos estáticos deberiamos ubicarlos en la carpeta 
                    strong public.

        p Ahora veremos porque todos los archivos estáticos deberian ir dentro de la carpeta 
            strong public
            | . 

    article(id="3" class="content")
        h2 Entendiendo el servidor de producción

        p De primeras eliminaremos nuestra carpeta 
            strong public.
        p Ahora generamos nuestra versión de producción con el comando:     
        p: code npm run build

        img(src="../../assets/img/2-9-como-funciona-dev-server/9.webp" alt="example")

        p Ahora creamos nuestro servidor de producción o previsualización con el comando: 
        p: code npm run preview 
        figure
            img(src="../../assets/img/2-9-como-funciona-dev-server/10.webp" alt="example").img-md
            figcaption  Vemos que la imagen no funciona.

        P ¿Por qué la imagen que estamos intentando cargar en el main.jsx no funciona? Porque la carpeta raíz de este servidor ahora mismo pasa a ser la carpeta 
            strong "dist" 
            |   y ya no la carpeta 
            strong "firs-project"
            | .

        p Entonces todo lo que exista en 
            strong "dist"
            |   será accesible desde la barra del navegador, por ejemplo: accederemos al archivo 
            strong "/assets/index-CXSZ1NGP.js"
            | .    
        img(src="../../assets/img/2-9-como-funciona-dev-server/11.webp" alt="example").img-md

        p Ahora, si nosotros intentamos acceder, por ejemplo, al archivo 
            strong "asd"
            |   que tenemos dentro de la raíz principal del proyecto, miraremos que no es accesible ya que no se encuentra en la carpeta 
            strong "dist"
            | .
        img(src="../../assets/img/2-9-como-funciona-dev-server/12.webp" alt="example")

        p Como ya nos habremos percatado, se están siguiendo las mismas reglas que en el 
            strong servidor de desarrollo
            | . Si la ruta no coincide con ningún archivo estático o a ninguna página o si esa página no existe, 
            strong Vite
            |   redireccionará automáticamente al 
            strong index.html
            | . La única diferencia es que toma en cuenta la raiz 
            strong "dist"
            | .

        p.note En resumen todo archivo al que queramos acceder desde la barra del navgeador, si no se encuentra o no coincide con nigun archivo en la carpeta 
            strong "dist"
            |   redireccionará al 
            strong index.html
            | . 

    article(id="4" class="content")
        h2 ¿Como puedo hacer que mis archivos estáticos que yo genere en mi "src" o donde sea, se copien dentro de "dist"?

        p Intentaremos importar el archivo 
            strong "react.svg"
            |   que se encuentra en la ubicación 
            strong "/src/assets/react.svg"
            |   de forma que sea válido tanto para 
            strong desarrollo 
            |   como para 
            strong producción
            |  . 
        img(src="../../assets/img/2-9-como-funciona-dev-server/13.webp" alt="example").img-md

        h3 Opción 1: Utilizando import - "No recomendada"

        p La primera opción que no es recomendable, es utilizar un 
            strong import
            |   desde el código, obteniendo la 
            strong URL
            |   de la imagen y sustituyendola en el 
            strong src
            |   de nuestra imagen que queremos importar.    

        figure 
            img(src="../../assets/img/2-9-como-funciona-dev-server/14.webp" alt="example")
            figcaption Esto es posible porque 
                strong Vite
                |   utiliza un empaquetador que es 
                strong "esbuild"
                |   y cuando ve algo así, lo que hace es obtener su 
                strong URL 
                |   tanto para 
                strong desarrollo 
                |   como para 
                strong producción
                | . 

        p Entonces si generamos nuestro 
            strong servidor de desarrollo
            |   con el comando: 

        p: code npm run dev 

        p Observaremos que la imagen se carga correctamente.    
        img(src="../../assets/img/2-9-como-funciona-dev-server/15.webp" alt="example")

        p Si ahora generamos nuestra versión de producción con el comando: 
        p: code npm run build 
        figure 
            img(src="../../assets/img/2-9-como-funciona-dev-server/16.webp" alt="example")
            figcaption Cuando 
                strong "esbuild"
                |   se encuentra el 
                strong import
                |   en nuestro código, lo que hace es copiar el achivo 
                strong "react.svg"
                |   en la carpeta 
                strong "assets"
                |   de la carpeta 
                strong "dist"
                |   y además le agrega un pequeño 
                strong hash
                |   para evitar colisiones con otros archivos que tengan el mismo nombre de "react.svg".

        p Y si después generamos el 
            strong servidor de producción
            |   con el comando: 

        p: code npm run preview 

        p Miraremos que la imagen tambien se carga correctamente. 
        img(src="../../assets/img/2-9-como-funciona-dev-server/17.webp" alt="example")

        p Esta sería la primera forma de hacerlo, pero no es la mejor, ni la mas recomendable.


        h3 Opción 2: Utilizando la carpeta public - "Recomendada"

        p Hay que recordar que todo lo que se encuentre dentro de la carpeta 
            strong public
            |   se copiará tal cual en la raíz de la carpeta 
            strong "dist"
            | , esto incluye el nombre de los archivos, carpetas, todo se pasa exactamente igual a 
            strong "dist"
            | .

        p Empezaremos por eliminar el archivo 
            strong "asd"
            |   que habiamos creado en la raíz del proyecto.

        p En la raíz del proyecto crearemos la carpeta 
            strong public 
            |   y moveremos la carpeta 
            strong "assets"
            |   que se encuentra en  
            strong "src"
            |   a la carpeta 
            strong public
            | .

        img(src="../../assets/img/2-9-como-funciona-dev-server/18.webp" alt="example").img-md

        p En nuestro archivo 
            strong main.jsx
            |   haremos referencia al archivo empezando por la carpeta 
            strong "assets"
            |   y ya no a la carpeta 
            strong "src"
            | .

        img(src="../../assets/img/2-9-como-funciona-dev-server/19.webp" alt="example")

        p Ahora simplemente creamos la versión de 
            strong producción
            |   con el comando: 

        p: code npm run build

        p Ya sabemos que esto nos generá la carpeta 
            strong "dist"
            |   pero ahora veremos la diferencia de haber puesto nuestros archivos estáticos en la carpeta 
            strong "public"
            |  .     
        img(src="../../assets/img/2-9-como-funciona-dev-server/20.webp" alt="example")

        p Como podemos observar en la carpeta 
            strong "dist"
            |   de la imagen de arriba solo contiene el nombre de: 

        p: span.ts-5 react.svg 

        p Cuando utilizamos 
            strong import
            |   al generar la versión de 
            strong producción
            |   el nombre que nos generaba, le agregaba un 
            strong hash
            | , exactamente se le ponia el siguiente nombre: 

        p: span.ts-5 react-CHdo91hT.svg

        div.ts-1 
            p Otra cosa que debemos saber es que los links y scripts que utilizamos dentro del 
                strong index.html
                |   es como si ocuparamos la sintaxis de 
                strong import
                |   ya que al generar la versión de 
                strong producción
                |   a nuestros archivos CSS y JS que habiamos enlazados en el index.html se transforman agregandoles un 
                strong hash
                | .
            img(src="../../assets/img/2-9-como-funciona-dev-server/21.webp" alt="example")

        p Ahora creamos el servidor de 
            strong producción
            |   con el comando: 
        p: code npm run preview     

        p Miraremos que todo funciona correctamente.
        img(src="../../assets/img/2-9-como-funciona-dev-server/22.webp" alt="example")

        p Todos nuestros archivos estáticos siempre deben de ir en la carpeta 
            strong public
            |  , esta es la versión más recomendada para enlazar nuestros archivos estáticos.


append submenu 
    -submenuLinks = [[1,'Servidor frontal'],[2,'Entendiendo el servidor de desarrollo'],[3,'Entendiendo el servidor de producción'],[4,'¿Como puedo hacer que mis archivos estáticos que yo genere en mi "src" o donde sea, se copien dentro de "dist"?']]
    +submenu(submenuLinks)