extends ../../templates/template 

append h1 
    h1 Empaquetado, bundles y Webpack

append content 
    p El más famoso de estos empaquetadores, y sin duda el que más se solía utilizar con React y Babel, es Webpack. Su principal función es empaquetar todos los archivos JS en un único archivo, en un único bundle. Sin embargo, esa no es su única función, ya que admite muchos más tipos de archivos y genera otros resultantes. Para empezar, vamos a tratarlo como si fuera un simple empaquetador de archivos JS y lo instalaremos en nuestro proyecto.

    p Lo que haremos a continuación lo puedes omitir, ya que existen formas mejores de empaquetar que veremos más adelante, pero mencionaremos Webpack para que entendamos porque ya no se suele empaquetar de esta manera.
    article(id="1" class="content")
        h2 Instalación y uso de Webpack

        p Ejecutamos el siguiente comando para instalar webpack
        p: strong npm i -D webpack webpack-cli 

        p Una vez instalado, lo que queremos hacer es empaquetar los archivos JS que hay dentro de nuestra carpeta dist que ya está previamente transpilado por Babel.

        p Webpack admite el empaquetado partiendo de un único archivo que se llama punto de entrada (entry point), ¿Cuál será este archivo de punto de entrada?, pues el que nos permita a través de el cargar toda la aplicación, a través de esos imports, en nuestro caso es el archivo render.js, ya que nuestro archivo render.js es un archivo en el cuál se llega a toda la aplicación, por eso es el punto de entrada.

        p Para empezar a utilizar Webpack ejecutamos el siguiente comando, que se encarga de empaquetar nuestro entry point.

        p: strong npx webpack --mode=development ./dist/render.js

        p Lo que hace es generarnos un archivo llamado 
            strong main.js 
            |    dentro de nuestra carpeta 
            strong dist
            | , este archivo es un bundle, donde están agrupados todos los archivos anteriores en uno solo y tiene un monton de sintaxis extraña porque hemos puesto el modo desarrollo.

        img(src="../../assets/img/2-5-empaquetado-bundles-y-webpack/1.webp" alt="example").has-mb.img-hg
        figure 
            img(src="../../assets/img/2-5-empaquetado-bundles-y-webpack/2.webp" alt="example")    
            figcaption Como podemos ver, generá código extraño, porque lo hemos puesto en modo desarrollo, pero en producción se comportará de manera distinta.

        p En definitiva lo que tenemos que hacer ahora es cargar este 
            strong main.js
            |   en nuestro HTML, en lugar de cargar el 
            strong ./dist/render.js
            |   y como este archivo 
            strong main.js
            |   ya está empaquetado, ya no utilizaremos el 
            strong type="module"
            |   porque ya no utilizaremos imports.

        div: pre: code.language-html 
            |&lt;!DOCTYPE html&gt;
            |&lt;html lang="es"&gt;
            |	&lt;head&gt;
            |		&lt;meta charset="UTF-8" /&gt;
            |		&lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;
            |		&lt;title&gt;Document&lt;/title&gt;
            |		&lt;link rel="stylesheet" href="css/styles.css" /&gt;
            |		&lt;!-- Cambiamos la ruta por main.js --&gt;
            |		&lt;script src="./dist/main.js" defer&gt;&lt;/script&gt;
            |		&lt;script src="https://unpkg.com/react@18/umd/react.development.js"&gt;&lt;/script&gt;
            |		&lt;script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"&gt;&lt;/script&gt;
            |	&lt;/head&gt;
            |	&lt;body&gt;
            |		&lt;div id="root"&gt;&lt;/div&gt;
            |	&lt;/body&gt;
            |&lt;/html&gt;

        p Al correr nuestro servidor con live server, vemos que todo funciona bien.    
        img(src="../../assets/img/2-5-empaquetado-bundles-y-webpack/3.webp" alt="example").img-md

        p Si ahora nos vamos a la pestaña Network, haciendo el filtro por JS y desabilitando la caché, vemos que ya no se están haciendo las peticiones extras que teniamos en el capítulo anterior.
        img(src="../../assets/img/2-5-empaquetado-bundles-y-webpack/4.webp" alt="example")

        p Esta sería la función principal de Webpack, de la misma forma que Babel, Webpack tambien admite un fichero de configuración, que crearemos a continuación.

        p En la raíz de nuestro proyecto, crearemos el archivo 
            strong webpack.config.js
        p En este archivo, utilizando CJS estableceremos la configuración siguiente.

        img(src="../../assets/img/2-5-empaquetado-bundles-y-webpack/5.webp" alt="example")

        p Ahora solo ejecutamos el comando 
            strong npx webpack
            |   y nos generará un archivo llamado 
            strong bundle.js
            |   en la carpeta 
            strong dist
            | .

        img(src="../../assets/img/2-5-empaquetado-bundles-y-webpack/6.webp" alt="example").img-hg

        p Procedemos a borrar el archivo 
            strong main.js
            |   que se habia generado anteriormente, y ahora en nuestro index.html, cambiamos la ruta por el arhivo 
            strong bundle.js

        img(src="../../assets/img/2-5-empaquetado-bundles-y-webpack/7.webp" alt="example")

        p Hasta aquí Webpack, parece ser una herramienta sencilla, pero realmente es todo un director de orquesta, y es que, la función de webpack no es solamente empaquetar, si no que puede cordinar absolutamente todas las tareas que tenemos que realizar desde que nuestro código está en la verión original hasta que llega a este 
            strong bundle.js 

        p Por ejemplo, puede ser Webpack el que se encargue de lanzar Babel, ya no tenemos que hacerlo por comando, sino que Webpack puede hacerlo por nosotros con una pequeña configuración.

        p Para ello tenemos que instalar un paquete más: 

        p: strong npm i -D babel-loader

        p Una vez instalado tenemos que ir a nuestro archivo 
            strong webpack.config.js
            |   e indicarle una configuración extra.

        p En este punto, en lugar de apuntar al 
            strong dist
            | , como ya vamos a cargar con el 
            strong babel-loader
            |   podemos apuntar directamente al entry point de nuestro código fuente, es decir al archivo 
            strong render.js
            |   que se encuentra en la carpeta 
            strong src.

        img(src="../../assets/img/2-5-empaquetado-bundles-y-webpack/8.webp" alt="example").img-md
        p Ahora eliminamos la carpeta 
            strong dist
            | .

        figure 
            img(src="../../assets/img/2-5-empaquetado-bundles-y-webpack/9.webp" alt="example").img-md
            figcaption Hemos eliminado la carpeta dist.

        p Ahora ejecutamos el comando 
            strong npx webpack
            |   nos generará de nuevo la carpeta 
            strong dist
            |   pero ahora con un solo archivo de 
            strong bundle
            |   de producción y transpilación todo en uno.

        img(src="../../assets/img/2-5-empaquetado-bundles-y-webpack/10.webp" alt="example").img-hg.has-mb

    article(id="2" class="content")
        h2 Instalando dependencias react y react-dom

        p Ahora para finalizar esta configuración, lo que vamos hacer es quitarnos de en medio los 2 scripts que tenemos en origen en nuestro 
            strong index.html 
        img(src="../../assets/img/2-5-empaquetado-bundles-y-webpack/11.webp" alt="example").has-mb
        figure 
            img(src="../../assets/img/2-5-empaquetado-bundles-y-webpack/12.webp" alt="example")
            figcaption Hemos eliminado los scripts de react y react-dom.

        p Lo que haremos ahora es instalarlas como dependecias de producción en nuestro proyecto, con el comando: 
        p: strong npm i react react-dom

        p Una vez instaladas, importaremos 
            strong react
            |   y 
            strong react-dom
            |   en donde vayan a ser utilizadas.

        p Entonces nos vamos al archivo 
            strong render.js
            |   y al archivo 
            strong  component.js
            | .

        p: strong render.js
        img(src="../../assets/img/2-5-empaquetado-bundles-y-webpack/13.webp" alt="example")

        p: strong component.js
        img(src="../../assets/img/2-5-empaquetado-bundles-y-webpack/14.webp" alt="example")

        p Si ahora ejecutamos el comando 
            strong npx webpack
            |    miraremos que nos genera un archivo 
            strong bundle.js
            |   que ya no se parece para nada al que teniamos anteriormente.

        figure     
            img(src="../../assets/img/2-5-empaquetado-bundles-y-webpack/15.webp" alt="example")
            figcaption Ahora nuestro archivo bundle, es un pedazo de archivo enorme que contiene todo el código de las dependencias de 
                strong react
                |   y de 
                strong react-dom
                |. 

        p Por último Webpack es tan maravilloso que si lo configuramos a modo producción (production), el 
            strong bundle
            |   ahora se genera completamente minificado y ofuscado, para ocupar el mínimo espacio posible, e incluso nos genera una licencia.
        img(src="../../assets/img/2-5-empaquetado-bundles-y-webpack/17.webp" alt="example").img-md
        img(src="../../assets/img/2-5-empaquetado-bundles-y-webpack/16.webp" alt="example")

        p En definitiva 
            strong Webpack
            |   puede hacer muchas cosas por nosotros, 
            strong siempre y cuando sepamos configurarlo
            | , y este es el problema, la configuración de 
            strong Webpack
            |   la configuración de 
            strong Babel
            |   como ya nos hemos dado cuenta, es un tema bastante dificíl y si no sabemos que opciones tenemos que utilizar y como configurar cada una de estas herramientas, es muy dificíl sacar un proyecto adelante y que todo funcione, y terminemos desesperandonos porque realmente es pesado y dificíl de configurar.


append submenu 
    -submenuLinks = [[1,'Instalación y uso de Webpack'],[2,'Instalando dependencias react y react-dom']]
    +submenu(submenuLinks)